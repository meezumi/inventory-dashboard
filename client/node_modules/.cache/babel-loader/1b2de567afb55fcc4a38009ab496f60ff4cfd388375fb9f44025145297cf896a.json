{"ast":null,"code":"/**\r\n * Format currency amount\r\n * @param {number} amount - The amount to format\r\n * @returns {string} - Formatted currency string\r\n */\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount);\n};\n\n/**\r\n * Format date to display format\r\n * @param {string} dateString - ISO date string\r\n * @returns {string} - Formatted date\r\n */\nexport const formatDate = dateString => {\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat('en-US', {\n    month: 'short',\n    day: '2-digit',\n    year: '2-digit'\n  }).format(date);\n};\n\n/**\r\n * Group data by month for charts\r\n * @param {Array} data - Array of inventory items\r\n * @returns {Object} - Data grouped by month\r\n */\nexport const groupByMonth = data => {\n  const grouped = {};\n  data.forEach(item => {\n    const date = new Date(item.date);\n    const month = `${date.getMonth() + 1}/${date.getFullYear().toString().slice(2)}`;\n    if (!grouped[month]) {\n      grouped[month] = {\n        NEW: 0,\n        USED: 0,\n        CPO: 0,\n        newMSRP: 0,\n        usedMSRP: 0,\n        cpoMSRP: 0,\n        count: 0\n      };\n    }\n    grouped[month][item.type] += 1;\n    grouped[month].count += 1;\n    const msrp = parseFloat(item.msrp);\n    if (item.type === 'NEW') {\n      grouped[month].newMSRP += msrp;\n    } else if (item.type === 'USED') {\n      grouped[month].usedMSRP += msrp;\n    } else if (item.type === 'CPO') {\n      grouped[month].cpoMSRP += msrp;\n    }\n  });\n  return grouped;\n};","map":{"version":3,"names":["formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","dateString","date","Date","DateTimeFormat","month","day","year","groupByMonth","data","grouped","forEach","item","getMonth","getFullYear","toString","slice","NEW","USED","CPO","newMSRP","usedMSRP","cpoMSRP","count","type","msrp","parseFloat"],"sources":["D:/Code Stuff/inventory dashboard/client/src/utils/formatters.js"],"sourcesContent":["/**\r\n * Format currency amount\r\n * @param {number} amount - The amount to format\r\n * @returns {string} - Formatted currency string\r\n */\r\nexport const formatCurrency = (amount) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0\r\n    }).format(amount);\r\n  };\r\n  \r\n  /**\r\n   * Format date to display format\r\n   * @param {string} dateString - ISO date string\r\n   * @returns {string} - Formatted date\r\n   */\r\n  export const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      month: 'short',\r\n      day: '2-digit',\r\n      year: '2-digit'\r\n    }).format(date);\r\n  };\r\n  \r\n  /**\r\n   * Group data by month for charts\r\n   * @param {Array} data - Array of inventory items\r\n   * @returns {Object} - Data grouped by month\r\n   */\r\n  export const groupByMonth = (data) => {\r\n    const grouped = {};\r\n    \r\n    data.forEach(item => {\r\n      const date = new Date(item.date);\r\n      const month = `${date.getMonth() + 1}/${date.getFullYear().toString().slice(2)}`;\r\n      \r\n      if (!grouped[month]) {\r\n        grouped[month] = {\r\n          NEW: 0,\r\n          USED: 0,\r\n          CPO: 0,\r\n          newMSRP: 0,\r\n          usedMSRP: 0,\r\n          cpoMSRP: 0,\r\n          count: 0\r\n        };\r\n      }\r\n      \r\n      grouped[month][item.type] += 1;\r\n      grouped[month].count += 1;\r\n      \r\n      const msrp = parseFloat(item.msrp);\r\n      \r\n      if (item.type === 'NEW') {\r\n        grouped[month].newMSRP += msrp;\r\n      } else if (item.type === 'USED') {\r\n        grouped[month].usedMSRP += msrp;\r\n      } else if (item.type === 'CPO') {\r\n        grouped[month].cpoMSRP += msrp;\r\n      }\r\n    });\r\n    \r\n    return grouped;\r\n  };"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAIC,MAAM,IAAK;EACtC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;AACnB,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMQ,UAAU,GAAIC,UAAU,IAAK;EACxC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAO,IAAIR,IAAI,CAACW,cAAc,CAAC,OAAO,EAAE;IACtCC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE;EACR,CAAC,CAAC,CAACR,MAAM,CAACG,IAAI,CAAC;AACjB,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMM,YAAY,GAAIC,IAAI,IAAK;EACpC,MAAMC,OAAO,GAAG,CAAC,CAAC;EAElBD,IAAI,CAACE,OAAO,CAACC,IAAI,IAAI;IACnB,MAAMV,IAAI,GAAG,IAAIC,IAAI,CAACS,IAAI,CAACV,IAAI,CAAC;IAChC,MAAMG,KAAK,GAAG,GAAGH,IAAI,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAIX,IAAI,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;IAEhF,IAAI,CAACN,OAAO,CAACL,KAAK,CAAC,EAAE;MACnBK,OAAO,CAACL,KAAK,CAAC,GAAG;QACfY,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE,CAAC;QACPC,GAAG,EAAE,CAAC;QACNC,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE,CAAC;QACXC,OAAO,EAAE,CAAC;QACVC,KAAK,EAAE;MACT,CAAC;IACH;IAEAb,OAAO,CAACL,KAAK,CAAC,CAACO,IAAI,CAACY,IAAI,CAAC,IAAI,CAAC;IAC9Bd,OAAO,CAACL,KAAK,CAAC,CAACkB,KAAK,IAAI,CAAC;IAEzB,MAAME,IAAI,GAAGC,UAAU,CAACd,IAAI,CAACa,IAAI,CAAC;IAElC,IAAIb,IAAI,CAACY,IAAI,KAAK,KAAK,EAAE;MACvBd,OAAO,CAACL,KAAK,CAAC,CAACe,OAAO,IAAIK,IAAI;IAChC,CAAC,MAAM,IAAIb,IAAI,CAACY,IAAI,KAAK,MAAM,EAAE;MAC/Bd,OAAO,CAACL,KAAK,CAAC,CAACgB,QAAQ,IAAII,IAAI;IACjC,CAAC,MAAM,IAAIb,IAAI,CAACY,IAAI,KAAK,KAAK,EAAE;MAC9Bd,OAAO,CAACL,KAAK,CAAC,CAACiB,OAAO,IAAIG,IAAI;IAChC;EACF,CAAC,CAAC;EAEF,OAAOf,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}