{"ast":null,"code":"/**\r\n * Format currency amount\r\n * @param {number} amount - The amount to format\r\n * @returns {string} - Formatted currency string\r\n */export const formatCurrency=amount=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',minimumFractionDigits:0,maximumFractionDigits:0}).format(amount);};/**\r\n   * Format date to display format\r\n   * @param {string} dateString - ISO date string\r\n   * @returns {string} - Formatted date\r\n   */export const formatDate=dateString=>{const date=new Date(dateString);return new Intl.DateTimeFormat('en-US',{month:'short',day:'2-digit',year:'2-digit'}).format(date);};/**\r\n   * Group data by month for charts\r\n   * @param {Array} data - Array of inventory items\r\n   * @returns {Object} - Data grouped by month\r\n   */export const groupByMonth=data=>{const grouped={};data.forEach(item=>{const date=new Date(item.date);const month=`${date.getMonth()+1}/${date.getFullYear().toString().slice(2)}`;if(!grouped[month]){grouped[month]={NEW:0,USED:0,CPO:0,newMSRP:0,usedMSRP:0,cpoMSRP:0,count:0};}grouped[month][item.type]+=1;grouped[month].count+=1;const msrp=parseFloat(item.msrp);if(item.type==='NEW'){grouped[month].newMSRP+=msrp;}else if(item.type==='USED'){grouped[month].usedMSRP+=msrp;}else if(item.type==='CPO'){grouped[month].cpoMSRP+=msrp;}});return grouped;};","map":{"version":3,"names":["formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","dateString","date","Date","DateTimeFormat","month","day","year","groupByMonth","data","grouped","forEach","item","getMonth","getFullYear","toString","slice","NEW","USED","CPO","newMSRP","usedMSRP","cpoMSRP","count","type","msrp","parseFloat"],"sources":["E:/openSource/inventory-dashboard/client/src/utils/formatters.js"],"sourcesContent":["/**\r\n * Format currency amount\r\n * @param {number} amount - The amount to format\r\n * @returns {string} - Formatted currency string\r\n */\r\nexport const formatCurrency = (amount) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0\r\n    }).format(amount);\r\n  };\r\n  \r\n  /**\r\n   * Format date to display format\r\n   * @param {string} dateString - ISO date string\r\n   * @returns {string} - Formatted date\r\n   */\r\n  export const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      month: 'short',\r\n      day: '2-digit',\r\n      year: '2-digit'\r\n    }).format(date);\r\n  };\r\n  \r\n  /**\r\n   * Group data by month for charts\r\n   * @param {Array} data - Array of inventory items\r\n   * @returns {Object} - Data grouped by month\r\n   */\r\n  export const groupByMonth = (data) => {\r\n    const grouped = {};\r\n    \r\n    data.forEach(item => {\r\n      const date = new Date(item.date);\r\n      const month = `${date.getMonth() + 1}/${date.getFullYear().toString().slice(2)}`;\r\n      \r\n      if (!grouped[month]) {\r\n        grouped[month] = {\r\n          NEW: 0,\r\n          USED: 0,\r\n          CPO: 0,\r\n          newMSRP: 0,\r\n          usedMSRP: 0,\r\n          cpoMSRP: 0,\r\n          count: 0\r\n        };\r\n      }\r\n      \r\n      grouped[month][item.type] += 1;\r\n      grouped[month].count += 1;\r\n      \r\n      const msrp = parseFloat(item.msrp);\r\n      \r\n      if (item.type === 'NEW') {\r\n        grouped[month].newMSRP += msrp;\r\n      } else if (item.type === 'USED') {\r\n        grouped[month].usedMSRP += msrp;\r\n      } else if (item.type === 'CPO') {\r\n        grouped[month].cpoMSRP += msrp;\r\n      }\r\n    });\r\n    \r\n    return grouped;\r\n  };"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,cAAc,CAAIC,MAAM,EAAK,CACtC,MAAO,IAAI,CAAAC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAE,CACpCC,KAAK,CAAE,UAAU,CACjBC,QAAQ,CAAE,KAAK,CACfC,qBAAqB,CAAE,CAAC,CACxBC,qBAAqB,CAAE,CACzB,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC,CACnB,CAAC,CAED;AACF;AACA;AACA;AACA,KACE,MAAO,MAAM,CAAAQ,UAAU,CAAIC,UAAU,EAAK,CACxC,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,UAAU,CAAC,CACjC,MAAO,IAAI,CAAAR,IAAI,CAACW,cAAc,CAAC,OAAO,CAAE,CACtCC,KAAK,CAAE,OAAO,CACdC,GAAG,CAAE,SAAS,CACdC,IAAI,CAAE,SACR,CAAC,CAAC,CAACR,MAAM,CAACG,IAAI,CAAC,CACjB,CAAC,CAED;AACF;AACA;AACA;AACA,KACE,MAAO,MAAM,CAAAM,YAAY,CAAIC,IAAI,EAAK,CACpC,KAAM,CAAAC,OAAO,CAAG,CAAC,CAAC,CAElBD,IAAI,CAACE,OAAO,CAACC,IAAI,EAAI,CACnB,KAAM,CAAAV,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACS,IAAI,CAACV,IAAI,CAAC,CAChC,KAAM,CAAAG,KAAK,CAAG,GAAGH,IAAI,CAACW,QAAQ,CAAC,CAAC,CAAG,CAAC,IAAIX,IAAI,CAACY,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,CAEhF,GAAI,CAACN,OAAO,CAACL,KAAK,CAAC,CAAE,CACnBK,OAAO,CAACL,KAAK,CAAC,CAAG,CACfY,GAAG,CAAE,CAAC,CACNC,IAAI,CAAE,CAAC,CACPC,GAAG,CAAE,CAAC,CACNC,OAAO,CAAE,CAAC,CACVC,QAAQ,CAAE,CAAC,CACXC,OAAO,CAAE,CAAC,CACVC,KAAK,CAAE,CACT,CAAC,CACH,CAEAb,OAAO,CAACL,KAAK,CAAC,CAACO,IAAI,CAACY,IAAI,CAAC,EAAI,CAAC,CAC9Bd,OAAO,CAACL,KAAK,CAAC,CAACkB,KAAK,EAAI,CAAC,CAEzB,KAAM,CAAAE,IAAI,CAAGC,UAAU,CAACd,IAAI,CAACa,IAAI,CAAC,CAElC,GAAIb,IAAI,CAACY,IAAI,GAAK,KAAK,CAAE,CACvBd,OAAO,CAACL,KAAK,CAAC,CAACe,OAAO,EAAIK,IAAI,CAChC,CAAC,IAAM,IAAIb,IAAI,CAACY,IAAI,GAAK,MAAM,CAAE,CAC/Bd,OAAO,CAACL,KAAK,CAAC,CAACgB,QAAQ,EAAII,IAAI,CACjC,CAAC,IAAM,IAAIb,IAAI,CAACY,IAAI,GAAK,KAAK,CAAE,CAC9Bd,OAAO,CAACL,KAAK,CAAC,CAACiB,OAAO,EAAIG,IAAI,CAChC,CACF,CAAC,CAAC,CAEF,MAAO,CAAAf,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}