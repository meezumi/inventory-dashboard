{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{getInventoryData}from'../../services/api';export const fetchInventory=createAsyncThunk('inventory/fetchInventory',async(filters,_ref)=>{let{rejectWithValue}=_ref;try{const response=await getInventoryData(filters);return response;}catch(error){return rejectWithValue(error.message);}});const initialState={data:[],recentData:{},totalCounts:{NEW:0,USED:0,CPO:0,total:0},averageMSRP:{NEW:0,USED:0,CPO:0},historyLog:[],status:'idle',error:null};const inventorySlice=createSlice({name:'inventory',initialState,reducers:{},extraReducers:builder=>{builder.addCase(fetchInventory.pending,state=>{state.status='loading';}).addCase(fetchInventory.fulfilled,(state,action)=>{state.status='succeeded';state.data=action.payload;// Calculate recent data metrics\nconst sortedData=[...action.payload].sort((a,b)=>new Date(b.date)-new Date(a.date));// Most recent date from data\nconst mostRecentDate=sortedData.length>0?sortedData[0].date:'';// Filter data by type\nconst newVehicles=action.payload.filter(item=>item.type==='NEW');const usedVehicles=action.payload.filter(item=>item.type==='USED');const cpoVehicles=action.payload.filter(item=>item.type==='CPO');// Calculate total counts\nstate.totalCounts={NEW:newVehicles.length,USED:usedVehicles.length,CPO:cpoVehicles.length,total:action.payload.length};// Calculate average MSRP for each type\nstate.averageMSRP={NEW:newVehicles.length>0?newVehicles.reduce((sum,item)=>sum+parseFloat(item.msrp),0)/newVehicles.length:0,USED:usedVehicles.length>0?usedVehicles.reduce((sum,item)=>sum+parseFloat(item.msrp),0)/usedVehicles.length:0,CPO:cpoVehicles.length>0?cpoVehicles.reduce((sum,item)=>sum+parseFloat(item.msrp),0)/cpoVehicles.length:0};// Generate history log entries by date\nconst dateMap={};action.payload.forEach(item=>{const date=item.date.substring(0,10);if(!dateMap[date]){dateMap[date]={date,NEW:{count:0,totalMSRP:0},USED:{count:0,totalMSRP:0},CPO:{count:0,totalMSRP:0}};}dateMap[date][item.type].count+=1;dateMap[date][item.type].totalMSRP+=parseFloat(item.msrp);});// Convert to array and sort by date\nstate.historyLog=Object.values(dateMap).sort((a,b)=>new Date(b.date)-new Date(a.date)).map(entry=>({...entry,NEW:{...entry.NEW,avgMSRP:entry.NEW.count>0?entry.NEW.totalMSRP/entry.NEW.count:0},USED:{...entry.USED,avgMSRP:entry.USED.count>0?entry.USED.totalMSRP/entry.USED.count:0},CPO:{...entry.CPO,avgMSRP:entry.CPO.count>0?entry.CPO.totalMSRP/entry.CPO.count:0}}));// Recent gathered data\nstate.recentData={date:mostRecentDate,totalItems:state.totalCounts.total,newTotal:newVehicles.reduce((sum,item)=>sum+parseFloat(item.msrp),0),usedTotal:usedVehicles.reduce((sum,item)=>sum+parseFloat(item.msrp),0),cpoTotal:cpoVehicles.reduce((sum,item)=>sum+parseFloat(item.msrp),0),newItems:state.totalCounts.NEW,usedItems:state.totalCounts.USED,cpoItems:state.totalCounts.CPO};}).addCase(fetchInventory.rejected,(state,action)=>{state.status='failed';state.error=action.payload;});}});export default inventorySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getInventoryData","fetchInventory","filters","_ref","rejectWithValue","response","error","message","initialState","data","recentData","totalCounts","NEW","USED","CPO","total","averageMSRP","historyLog","status","inventorySlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","sortedData","sort","a","b","Date","date","mostRecentDate","length","newVehicles","filter","item","type","usedVehicles","cpoVehicles","reduce","sum","parseFloat","msrp","dateMap","forEach","substring","count","totalMSRP","Object","values","map","entry","avgMSRP","totalItems","newTotal","usedTotal","cpoTotal","newItems","usedItems","cpoItems","rejected","reducer"],"sources":["E:/openSource/inventory-dashboard/client/src/features/inventory/inventorySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getInventoryData } from '../../services/api';\r\n\r\nexport const fetchInventory = createAsyncThunk(\r\n  'inventory/fetchInventory',\r\n  async (filters, { rejectWithValue }) => {\r\n    try {\r\n      const response = await getInventoryData(filters);\r\n      return response;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  data: [],\r\n  recentData: {},\r\n  totalCounts: {\r\n    NEW: 0,\r\n    USED: 0,\r\n    CPO: 0,\r\n    total: 0\r\n  },\r\n  averageMSRP: {\r\n    NEW: 0,\r\n    USED: 0,\r\n    CPO: 0\r\n  },\r\n  historyLog: [],\r\n  status: 'idle',\r\n  error: null,\r\n};\r\n\r\nconst inventorySlice = createSlice({\r\n  name: 'inventory',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchInventory.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchInventory.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.data = action.payload;\r\n        \r\n        // Calculate recent data metrics\r\n        const sortedData = [...action.payload].sort((a, b) => \r\n          new Date(b.date) - new Date(a.date)\r\n        );\r\n        \r\n        // Most recent date from data\r\n        const mostRecentDate = sortedData.length > 0 ? sortedData[0].date : '';\r\n        \r\n        // Filter data by type\r\n        const newVehicles = action.payload.filter(item => item.type === 'NEW');\r\n        const usedVehicles = action.payload.filter(item => item.type === 'USED');\r\n        const cpoVehicles = action.payload.filter(item => item.type === 'CPO');\r\n        \r\n        // Calculate total counts\r\n        state.totalCounts = {\r\n          NEW: newVehicles.length,\r\n          USED: usedVehicles.length,\r\n          CPO: cpoVehicles.length,\r\n          total: action.payload.length\r\n        };\r\n        \r\n        // Calculate average MSRP for each type\r\n        state.averageMSRP = {\r\n          NEW: newVehicles.length > 0 \r\n            ? newVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / newVehicles.length \r\n            : 0,\r\n          USED: usedVehicles.length > 0 \r\n            ? usedVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / usedVehicles.length \r\n            : 0,\r\n          CPO: cpoVehicles.length > 0 \r\n            ? cpoVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / cpoVehicles.length \r\n            : 0\r\n        };\r\n        \r\n        // Generate history log entries by date\r\n        const dateMap = {};\r\n        \r\n        action.payload.forEach(item => {\r\n          const date = item.date.substring(0, 10); \r\n          \r\n          if (!dateMap[date]) {\r\n            dateMap[date] = {\r\n              date,\r\n              NEW: { count: 0, totalMSRP: 0 },\r\n              USED: { count: 0, totalMSRP: 0 },\r\n              CPO: { count: 0, totalMSRP: 0 }\r\n            };\r\n          }\r\n          \r\n          dateMap[date][item.type].count += 1;\r\n          dateMap[date][item.type].totalMSRP += parseFloat(item.msrp);\r\n        });\r\n        \r\n        // Convert to array and sort by date\r\n        state.historyLog = Object.values(dateMap)\r\n          .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n          .map(entry => ({\r\n            ...entry,\r\n            NEW: {\r\n              ...entry.NEW,\r\n              avgMSRP: entry.NEW.count > 0 ? entry.NEW.totalMSRP / entry.NEW.count : 0\r\n            },\r\n            USED: {\r\n              ...entry.USED,\r\n              avgMSRP: entry.USED.count > 0 ? entry.USED.totalMSRP / entry.USED.count : 0\r\n            },\r\n            CPO: {\r\n              ...entry.CPO,\r\n              avgMSRP: entry.CPO.count > 0 ? entry.CPO.totalMSRP / entry.CPO.count : 0\r\n            }\r\n          }));\r\n          \r\n        // Recent gathered data\r\n        state.recentData = {\r\n          date: mostRecentDate,\r\n          totalItems: state.totalCounts.total,\r\n          newTotal: newVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\r\n          usedTotal: usedVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\r\n          cpoTotal: cpoVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\r\n          newItems: state.totalCounts.NEW,\r\n          usedItems: state.totalCounts.USED,\r\n          cpoItems: state.totalCounts.CPO\r\n        };\r\n      })\r\n      .addCase(fetchInventory.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default inventorySlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}