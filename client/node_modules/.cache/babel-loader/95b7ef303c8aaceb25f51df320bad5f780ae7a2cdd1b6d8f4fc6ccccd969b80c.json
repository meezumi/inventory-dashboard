{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code Stuff\\\\inventory dashboard\\\\client\\\\src\\\\components\\\\Dashboard\\\\AverageMSRP.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Chart } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { groupByMonth, formatCurrency } from '../../utils/formatters';\nimport { VEHICLE_TYPES, CHART_COLORS } from '../../utils/constants';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AverageMSRP = () => {\n  _s();\n  const {\n    data,\n    averageMSRP,\n    status\n  } = useSelector(state => state.inventory);\n  const [activeType, setActiveType] = useState(VEHICLE_TYPES.NEW);\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    if (status === 'succeeded' && data.length > 0) {\n      const groupedData = groupByMonth(data);\n      const months = Object.keys(groupedData).sort((a, b) => {\n        const [aMonth, aYear] = a.split('/');\n        const [bMonth, bYear] = b.split('/');\n        if (aYear !== bYear) return aYear - bYear;\n        return aMonth - bMonth;\n      });\n      const calculateAvgMSRP = (month, type) => {\n        const count = groupedData[month][type];\n        if (count === 0) return 0;\n        let totalMSRP = 0;\n        switch (type) {\n          case VEHICLE_TYPES.NEW:\n            totalMSRP = groupedData[month].newMSRP;\n            break;\n          case VEHICLE_TYPES.USED:\n            totalMSRP = groupedData[month].usedMSRP;\n            break;\n          case VEHICLE_TYPES.CPO:\n            totalMSRP = groupedData[month].cpoMSRP;\n            break;\n          default:\n            break;\n        }\n        return totalMSRP / count;\n      };\n      const chartDatasets = {\n        labels: months,\n        datasets: [{\n          label: `Average MSRP (${activeType})`,\n          data: months.map(month => calculateAvgMSRP(month, activeType)),\n          backgroundColor: CHART_COLORS[activeType],\n          borderWidth: 0,\n          borderRadius: 4\n        }]\n      };\n      setChartData(chartDatasets);\n    }\n  }, [data, status, activeType]);\n  const handleTypeChange = type => {\n    setActiveType(type);\n  };\n  if (status === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"section-title\",\n      children: \"Average MSRP in USD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tab ${activeType === VEHICLE_TYPES.NEW ? 'active' : ''}`,\n        onClick: () => handleTypeChange(VEHICLE_TYPES.NEW),\n        children: \"NEW\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tab ${activeType === VEHICLE_TYPES.USED ? 'active' : ''}`,\n        onClick: () => handleTypeChange(VEHICLE_TYPES.USED),\n        children: \"USED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tab ${activeType === VEHICLE_TYPES.CPO ? 'active' : ''}`,\n        onClick: () => handleTypeChange(VEHICLE_TYPES.CPO),\n        children: \"CPO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: chartData && /*#__PURE__*/_jsxDEV(Chart, {\n        type: \"bar\",\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              callbacks: {\n                label: function (context) {\n                  return formatCurrency(context.raw);\n                }\n              }\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              grid: {\n                color: '#f0f0f0'\n              },\n              ticks: {\n                callback: function (value) {\n                  return '$' + value.toLocaleString();\n                }\n              }\n            },\n            x: {\n              grid: {\n                display: false\n              }\n            }\n          }\n        },\n        height: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(AverageMSRP, \"NlWtJb8tjEExpdySKNARrgcqGac=\", false, function () {\n  return [useSelector];\n});\n_c = AverageMSRP;\nexport default AverageMSRP;\nvar _c;\n$RefreshReg$(_c, \"AverageMSRP\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","groupByMonth","formatCurrency","VEHICLE_TYPES","CHART_COLORS","jsxDEV","_jsxDEV","AverageMSRP","_s","data","averageMSRP","status","state","inventory","activeType","setActiveType","NEW","chartData","setChartData","length","groupedData","months","Object","keys","sort","a","b","aMonth","aYear","split","bMonth","bYear","calculateAvgMSRP","month","type","count","totalMSRP","newMSRP","USED","usedMSRP","CPO","cpoMSRP","chartDatasets","labels","datasets","label","map","backgroundColor","borderWidth","borderRadius","handleTypeChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","callbacks","context","raw","scales","y","beginAtZero","grid","color","ticks","callback","value","toLocaleString","x","height","_c","$RefreshReg$"],"sources":["D:/Code Stuff/inventory dashboard/client/src/components/Dashboard/AverageMSRP.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport { \r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\nimport { groupByMonth, formatCurrency } from '../../utils/formatters';\r\nimport { VEHICLE_TYPES, CHART_COLORS } from '../../utils/constants';\r\nimport './Dashboard.css';\r\n\r\nconst AverageMSRP = () => {\r\n  const { data, averageMSRP, status } = useSelector(state => state.inventory);\r\n  const [activeType, setActiveType] = useState(VEHICLE_TYPES.NEW);\r\n  const [chartData, setChartData] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    if (status === 'succeeded' && data.length > 0) {\r\n      const groupedData = groupByMonth(data);\r\n      const months = Object.keys(groupedData).sort((a, b) => {\r\n        const [aMonth, aYear] = a.split('/');\r\n        const [bMonth, bYear] = b.split('/');\r\n        \r\n        if (aYear !== bYear) return aYear - bYear;\r\n        return aMonth - bMonth;\r\n      });\r\n      \r\n      const calculateAvgMSRP = (month, type) => {\r\n        const count = groupedData[month][type];\r\n        if (count === 0) return 0;\r\n        \r\n        let totalMSRP = 0;\r\n        switch (type) {\r\n          case VEHICLE_TYPES.NEW:\r\n            totalMSRP = groupedData[month].newMSRP;\r\n            break;\r\n          case VEHICLE_TYPES.USED:\r\n            totalMSRP = groupedData[month].usedMSRP;\r\n            break;\r\n          case VEHICLE_TYPES.CPO:\r\n            totalMSRP = groupedData[month].cpoMSRP;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        \r\n        return totalMSRP / count;\r\n      };\r\n      \r\n      const chartDatasets = {\r\n        labels: months,\r\n        datasets: [\r\n          {\r\n            label: `Average MSRP (${activeType})`,\r\n            data: months.map(month => calculateAvgMSRP(month, activeType)),\r\n            backgroundColor: CHART_COLORS[activeType],\r\n            borderWidth: 0,\r\n            borderRadius: 4,\r\n          }\r\n        ]\r\n      };\r\n      \r\n      setChartData(chartDatasets);\r\n    }\r\n  }, [data, status, activeType]);\r\n  \r\n  const handleTypeChange = (type) => {\r\n    setActiveType(type);\r\n  };\r\n  \r\n  if (status === 'loading') {\r\n    return <div className=\"section\">Loading...</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"section\">\r\n      <h3 className=\"section-title\">Average MSRP in USD</h3>\r\n      \r\n      <div className=\"tabs\">\r\n        <div \r\n          className={`tab ${activeType === VEHICLE_TYPES.NEW ? 'active' : ''}`}\r\n          onClick={() => handleTypeChange(VEHICLE_TYPES.NEW)}\r\n        >\r\n          NEW\r\n        </div>\r\n        <div \r\n          className={`tab ${activeType === VEHICLE_TYPES.USED ? 'active' : ''}`}\r\n          onClick={() => handleTypeChange(VEHICLE_TYPES.USED)}\r\n        >\r\n          USED\r\n        </div>\r\n        <div \r\n          className={`tab ${activeType === VEHICLE_TYPES.CPO ? 'active' : ''}`}\r\n          onClick={() => handleTypeChange(VEHICLE_TYPES.CPO)}\r\n        >\r\n          CPO\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"chart-container\">\r\n        {chartData && (\r\n          <Chart \r\n            type=\"bar\" \r\n            data={chartData}\r\n            options={{\r\n              responsive: true,\r\n              maintainAspectRatio: false,\r\n              plugins: {\r\n                legend: {\r\n                  display: false\r\n                },\r\n                tooltip: {\r\n                  callbacks: {\r\n                    label: function(context) {\r\n                      return formatCurrency(context.raw);\r\n                    }\r\n                  }\r\n                }\r\n              },\r\n              scales: {\r\n                y: {\r\n                  beginAtZero: true,\r\n                  grid: {\r\n                    color: '#f0f0f0'\r\n                  },\r\n                  ticks: {\r\n                    callback: function(value) {\r\n                      return '$' + value.toLocaleString();\r\n                    }\r\n                  }\r\n                },\r\n                x: {\r\n                  grid: {\r\n                    display: false\r\n                  }\r\n                }\r\n              }\r\n            }}\r\n            height={300}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AverageMSRP;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}