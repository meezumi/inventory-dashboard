{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getInventoryData } from '../../services/api';\nexport const fetchInventory = createAsyncThunk('inventory/fetchInventory', async (filters, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await getInventoryData(filters);\n    return response;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  data: [],\n  recentData: {},\n  totalCounts: {\n    NEW: 0,\n    USED: 0,\n    CPO: 0,\n    total: 0\n  },\n  averageMSRP: {\n    NEW: 0,\n    USED: 0,\n    CPO: 0\n  },\n  historyLog: [],\n  status: 'idle',\n  error: null\n};\nconst inventorySlice = createSlice({\n  name: 'inventory',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchInventory.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchInventory.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n\n      // Calculate recent data metrics\n      const sortedData = [...action.payload].sort((a, b) => new Date(b.date) - new Date(a.date));\n\n      // Most recent date from data\n      const mostRecentDate = sortedData.length > 0 ? sortedData[0].date : '';\n\n      // Filter data by type\n      const newVehicles = action.payload.filter(item => item.type === 'NEW');\n      const usedVehicles = action.payload.filter(item => item.type === 'USED');\n      const cpoVehicles = action.payload.filter(item => item.type === 'CPO');\n\n      // Calculate total counts\n      state.totalCounts = {\n        NEW: newVehicles.length,\n        USED: usedVehicles.length,\n        CPO: cpoVehicles.length,\n        total: action.payload.length\n      };\n\n      // Calculate average MSRP for each type\n      state.averageMSRP = {\n        NEW: newVehicles.length > 0 ? newVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / newVehicles.length : 0,\n        USED: usedVehicles.length > 0 ? usedVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / usedVehicles.length : 0,\n        CPO: cpoVehicles.length > 0 ? cpoVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / cpoVehicles.length : 0\n      };\n\n      // Generate history log entries by date\n      const dateMap = {};\n      action.payload.forEach(item => {\n        const date = item.date.substring(0, 10);\n        if (!dateMap[date]) {\n          dateMap[date] = {\n            date,\n            NEW: {\n              count: 0,\n              totalMSRP: 0\n            },\n            USED: {\n              count: 0,\n              totalMSRP: 0\n            },\n            CPO: {\n              count: 0,\n              totalMSRP: 0\n            }\n          };\n        }\n        dateMap[date][item.type].count += 1;\n        dateMap[date][item.type].totalMSRP += parseFloat(item.msrp);\n      });\n\n      // Convert to array and sort by date\n      state.historyLog = Object.values(dateMap).sort((a, b) => new Date(b.date) - new Date(a.date)).map(entry => ({\n        ...entry,\n        NEW: {\n          ...entry.NEW,\n          avgMSRP: entry.NEW.count > 0 ? entry.NEW.totalMSRP / entry.NEW.count : 0\n        },\n        USED: {\n          ...entry.USED,\n          avgMSRP: entry.USED.count > 0 ? entry.USED.totalMSRP / entry.USED.count : 0\n        },\n        CPO: {\n          ...entry.CPO,\n          avgMSRP: entry.CPO.count > 0 ? entry.CPO.totalMSRP / entry.CPO.count : 0\n        }\n      }));\n\n      // Recent gathered data\n      state.recentData = {\n        date: mostRecentDate,\n        totalItems: state.totalCounts.total,\n        newTotal: newVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\n        usedTotal: usedVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\n        cpoTotal: cpoVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\n        newItems: state.totalCounts.NEW,\n        usedItems: state.totalCounts.USED,\n        cpoItems: state.totalCounts.CPO\n      };\n    }).addCase(fetchInventory.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport default inventorySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getInventoryData","fetchInventory","filters","rejectWithValue","response","error","message","initialState","data","recentData","totalCounts","NEW","USED","CPO","total","averageMSRP","historyLog","status","inventorySlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","sortedData","sort","a","b","Date","date","mostRecentDate","length","newVehicles","filter","item","type","usedVehicles","cpoVehicles","reduce","sum","parseFloat","msrp","dateMap","forEach","substring","count","totalMSRP","Object","values","map","entry","avgMSRP","totalItems","newTotal","usedTotal","cpoTotal","newItems","usedItems","cpoItems","rejected","reducer"],"sources":["E:/openSource/inventory-dashboard/client/src/features/inventory/inventorySlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { getInventoryData } from '../../services/api';\r\n\r\nexport const fetchInventory = createAsyncThunk(\r\n  'inventory/fetchInventory',\r\n  async (filters, { rejectWithValue }) => {\r\n    try {\r\n      const response = await getInventoryData(filters);\r\n      return response;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  data: [],\r\n  recentData: {},\r\n  totalCounts: {\r\n    NEW: 0,\r\n    USED: 0,\r\n    CPO: 0,\r\n    total: 0\r\n  },\r\n  averageMSRP: {\r\n    NEW: 0,\r\n    USED: 0,\r\n    CPO: 0\r\n  },\r\n  historyLog: [],\r\n  status: 'idle',\r\n  error: null,\r\n};\r\n\r\nconst inventorySlice = createSlice({\r\n  name: 'inventory',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchInventory.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchInventory.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.data = action.payload;\r\n        \r\n        // Calculate recent data metrics\r\n        const sortedData = [...action.payload].sort((a, b) => \r\n          new Date(b.date) - new Date(a.date)\r\n        );\r\n        \r\n        // Most recent date from data\r\n        const mostRecentDate = sortedData.length > 0 ? sortedData[0].date : '';\r\n        \r\n        // Filter data by type\r\n        const newVehicles = action.payload.filter(item => item.type === 'NEW');\r\n        const usedVehicles = action.payload.filter(item => item.type === 'USED');\r\n        const cpoVehicles = action.payload.filter(item => item.type === 'CPO');\r\n        \r\n        // Calculate total counts\r\n        state.totalCounts = {\r\n          NEW: newVehicles.length,\r\n          USED: usedVehicles.length,\r\n          CPO: cpoVehicles.length,\r\n          total: action.payload.length\r\n        };\r\n        \r\n        // Calculate average MSRP for each type\r\n        state.averageMSRP = {\r\n          NEW: newVehicles.length > 0 \r\n            ? newVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / newVehicles.length \r\n            : 0,\r\n          USED: usedVehicles.length > 0 \r\n            ? usedVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / usedVehicles.length \r\n            : 0,\r\n          CPO: cpoVehicles.length > 0 \r\n            ? cpoVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0) / cpoVehicles.length \r\n            : 0\r\n        };\r\n        \r\n        // Generate history log entries by date\r\n        const dateMap = {};\r\n        \r\n        action.payload.forEach(item => {\r\n          const date = item.date.substring(0, 10); \r\n          \r\n          if (!dateMap[date]) {\r\n            dateMap[date] = {\r\n              date,\r\n              NEW: { count: 0, totalMSRP: 0 },\r\n              USED: { count: 0, totalMSRP: 0 },\r\n              CPO: { count: 0, totalMSRP: 0 }\r\n            };\r\n          }\r\n          \r\n          dateMap[date][item.type].count += 1;\r\n          dateMap[date][item.type].totalMSRP += parseFloat(item.msrp);\r\n        });\r\n        \r\n        // Convert to array and sort by date\r\n        state.historyLog = Object.values(dateMap)\r\n          .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n          .map(entry => ({\r\n            ...entry,\r\n            NEW: {\r\n              ...entry.NEW,\r\n              avgMSRP: entry.NEW.count > 0 ? entry.NEW.totalMSRP / entry.NEW.count : 0\r\n            },\r\n            USED: {\r\n              ...entry.USED,\r\n              avgMSRP: entry.USED.count > 0 ? entry.USED.totalMSRP / entry.USED.count : 0\r\n            },\r\n            CPO: {\r\n              ...entry.CPO,\r\n              avgMSRP: entry.CPO.count > 0 ? entry.CPO.totalMSRP / entry.CPO.count : 0\r\n            }\r\n          }));\r\n          \r\n        // Recent gathered data\r\n        state.recentData = {\r\n          date: mostRecentDate,\r\n          totalItems: state.totalCounts.total,\r\n          newTotal: newVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\r\n          usedTotal: usedVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\r\n          cpoTotal: cpoVehicles.reduce((sum, item) => sum + parseFloat(item.msrp), 0),\r\n          newItems: state.totalCounts.NEW,\r\n          usedItems: state.totalCounts.USED,\r\n          cpoItems: state.totalCounts.CPO\r\n        };\r\n      })\r\n      .addCase(fetchInventory.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default inventorySlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}